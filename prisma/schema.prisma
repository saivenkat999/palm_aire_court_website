// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Unit {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  type        UnitType
  capacity    Int
  beds        Int?
  baths       Int?
  amenities   String[] @default([])
  features    String[] @default([])
  photos      String[] @default([])
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ratePlans   RatePlan[]
  holds       Hold[]
  bookings    Booking[]
}

enum UnitType {
  TRAILER
  COTTAGE_1BR
  COTTAGE_2BR
  RV_SITE
}

model RatePlan {
  id          String   @id @default(cuid())
  unit        Unit?    @relation(fields: [unitId], references: [id])
  unitId      String?
  category    UnitType? // if you want categoryâ€‘wide rates for multiple units
  nightly     Int?     // cents
  weekly      Int?
  monthly     Int?
  fourMonth   Int?
  currency    String   @default("USD")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Season {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  discountPct Int      // e.g., 10 = 10%
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Fee {
  id          String   @id @default(cuid())
  name        String   // "Cleaning Fee"
  amount      Int      // cents
  perStay     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Hold {
  id          String   @id @default(cuid())
  unit        Unit     @relation(fields: [unitId], references: [id])
  unitId      String
  checkIn     DateTime
  checkOut    DateTime
  expiresAt   DateTime
  status      HoldStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum HoldStatus {
  ACTIVE
  EXPIRED
  CONVERTED
  CANCELLED
}

model Booking {
  id          String   @id @default(cuid())
  unit        Unit     @relation(fields: [unitId], references: [id])
  unitId      String
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  checkIn     DateTime
  checkOut    DateTime
  status      BookingStatus @default(CONFIRMED)
  totalCents  Int
  currency    String   @default("USD")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  payment     Payment?
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
}

model Customer {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings    Booking[]
}

model Payment {
  id               String   @id @default(cuid())
  booking          Booking  @relation(fields: [bookingId], references: [id])
  bookingId        String   @unique
  provider         String   @default("stripe")
  stripeIntentId   String   @unique
  amountCents      Int
  currency         String   @default("USD")
  status           String   // "succeeded", "requires_payment_method", etc.
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}